<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="234" onload="init(evt)" viewBox="0 0 1200 234" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="234" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python hexagon_polychromatic_windows.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="223.00"> </text><svg id="frames" x="10" width="1180" total_samples="30286"><g><title>&lt;module&gt; (hexagon_polychromatic_windows.py:1) (59 samples, 0.19%)</title><rect x="0.0000%" y="68" width="0.1948%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="59"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1176) (59 samples, 0.19%)</title><rect x="0.0000%" y="84" width="0.1948%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="59"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1147) (59 samples, 0.19%)</title><rect x="0.0000%" y="100" width="0.1948%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="59"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:690) (59 samples, 0.19%)</title><rect x="0.0000%" y="116" width="0.1948%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="59"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:940) (59 samples, 0.19%)</title><rect x="0.0000%" y="132" width="0.1948%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="59"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (59 samples, 0.19%)</title><rect x="0.0000%" y="148" width="0.1948%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="59"/><text x="0.2500%" y="158.50"></text></g><g><title>get_colors (diffractsim\polychromatic_simulator.py:104) (35 samples, 0.12%)</title><rect x="0.2113%" y="84" width="0.1156%" height="15" fill="rgb(207,160,47)" fg:x="64" fg:w="35"/><text x="0.4613%" y="94.50"></text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:22) (76 samples, 0.25%)</title><rect x="2.9023%" y="100" width="0.2509%" height="15" fill="rgb(228,23,34)" fg:x="879" fg:w="76"/><text x="3.1523%" y="110.50"></text></g><g><title>_default_fft_func (cupy\fft\_fft.py:639) (31 samples, 0.10%)</title><rect x="3.2490%" y="132" width="0.1024%" height="15" fill="rgb(218,30,26)" fg:x="984" fg:w="31"/><text x="3.4990%" y="142.50"></text></g><g><title>_default_fft_func (cupy\fft\_fft.py:642) (74 samples, 0.24%)</title><rect x="3.3514%" y="132" width="0.2443%" height="15" fill="rgb(220,122,19)" fg:x="1015" fg:w="74"/><text x="3.6014%" y="142.50"></text></g><g><title>_prep_fftn_axes (cupy\fft\_fft.py:283) (34 samples, 0.11%)</title><rect x="3.4835%" y="148" width="0.1123%" height="15" fill="rgb(250,228,42)" fg:x="1055" fg:w="34"/><text x="3.7335%" y="158.50"></text></g><g><title>_default_fft_func (cupy\fft\_fft.py:643) (58 samples, 0.19%)</title><rect x="3.5957%" y="132" width="0.1915%" height="15" fill="rgb(240,193,28)" fg:x="1089" fg:w="58"/><text x="3.8457%" y="142.50"></text></g><g><title>fft2 (cupy\fft\_fft.py:726) (186 samples, 0.61%)</title><rect x="3.1830%" y="116" width="0.6141%" height="15" fill="rgb(216,20,37)" fg:x="964" fg:w="186"/><text x="3.4330%" y="126.50"></text></g><g><title>_fftn (cupy\fft\_fft.py:582) (33 samples, 0.11%)</title><rect x="3.8103%" y="132" width="0.1090%" height="15" fill="rgb(206,188,39)" fg:x="1154" fg:w="33"/><text x="4.0603%" y="142.50"></text></g><g><title>_fftn (cupy\fft\_fft.py:588) (32 samples, 0.11%)</title><rect x="3.9193%" y="132" width="0.1057%" height="15" fill="rgb(217,207,13)" fg:x="1187" fg:w="32"/><text x="4.1693%" y="142.50"></text></g><g><title>_exec_fftn (cupy\fft\_fft.py:517) (141 samples, 0.47%)</title><rect x="4.3056%" y="148" width="0.4656%" height="15" fill="rgb(231,73,38)" fg:x="1304" fg:w="141"/><text x="4.5556%" y="158.50"></text></g><g><title>empty (cupy\_creation\basic.py:22) (126 samples, 0.42%)</title><rect x="4.8702%" y="164" width="0.4160%" height="15" fill="rgb(225,20,46)" fg:x="1475" fg:w="126"/><text x="5.1202%" y="174.50"></text></g><g><title>_exec_fftn (cupy\fft\_fft.py:552) (156 samples, 0.52%)</title><rect x="4.7745%" y="148" width="0.5151%" height="15" fill="rgb(210,31,41)" fg:x="1446" fg:w="156"/><text x="5.0245%" y="158.50"></text></g><g><title>_exec_fftn (cupy\fft\_fft.py:557) (310 samples, 1.02%)</title><rect x="5.2995%" y="148" width="1.0236%" height="15" fill="rgb(221,200,47)" fg:x="1605" fg:w="310"/><text x="5.5495%" y="158.50"></text></g><g><title>_exec_fftn (cupy\fft\_fft.py:561) (55 samples, 0.18%)</title><rect x="6.3429%" y="148" width="0.1816%" height="15" fill="rgb(226,26,5)" fg:x="1921" fg:w="55"/><text x="6.5929%" y="158.50"></text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:25) (1,022 samples, 3.37%)</title><rect x="3.1533%" y="100" width="3.3745%" height="15" fill="rgb(249,33,26)" fg:x="955" fg:w="1022"/><text x="3.4033%" y="110.50">ang..</text></g><g><title>fft2 (cupy\fft\_fft.py:727) (827 samples, 2.73%)</title><rect x="3.7971%" y="116" width="2.7306%" height="15" fill="rgb(235,183,28)" fg:x="1150" fg:w="827"/><text x="4.0471%" y="126.50">ff..</text></g><g><title>_fftn (cupy\fft\_fft.py:617) (704 samples, 2.32%)</title><rect x="4.2033%" y="132" width="2.3245%" height="15" fill="rgb(221,5,38)" fg:x="1273" fg:w="704"/><text x="4.4533%" y="142.50">_..</text></g><g><title>fftshift (cupy\fft\_fft.py:1077) (82 samples, 0.27%)</title><rect x="6.5575%" y="116" width="0.2708%" height="15" fill="rgb(247,18,42)" fg:x="1986" fg:w="82"/><text x="6.8075%" y="126.50"></text></g><g><title>asarray (cupy\_creation\from_data.py:75) (69 samples, 0.23%)</title><rect x="6.6004%" y="132" width="0.2278%" height="15" fill="rgb(241,131,45)" fg:x="1999" fg:w="69"/><text x="6.8504%" y="142.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:124) (78 samples, 0.26%)</title><rect x="7.0957%" y="132" width="0.2575%" height="15" fill="rgb(249,31,29)" fg:x="2149" fg:w="78"/><text x="7.3457%" y="142.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:85) (72 samples, 0.24%)</title><rect x="7.7495%" y="148" width="0.2377%" height="15" fill="rgb(225,111,53)" fg:x="2347" fg:w="72"/><text x="7.9995%" y="158.50"></text></g><g><title>_new_like_order_and_strides (cupy\_creation\basic.py:45) (38 samples, 0.13%)</title><rect x="7.8617%" y="164" width="0.1255%" height="15" fill="rgb(238,160,17)" fg:x="2381" fg:w="38"/><text x="8.1117%" y="174.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:140) (202 samples, 0.67%)</title><rect x="7.7197%" y="132" width="0.6670%" height="15" fill="rgb(214,148,48)" fg:x="2338" fg:w="202"/><text x="7.9697%" y="142.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:88) (117 samples, 0.39%)</title><rect x="8.0004%" y="148" width="0.3863%" height="15" fill="rgb(232,36,49)" fg:x="2423" fg:w="117"/><text x="8.2504%" y="158.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:142) (48 samples, 0.16%)</title><rect x="8.4594%" y="132" width="0.1585%" height="15" fill="rgb(209,103,24)" fg:x="2562" fg:w="48"/><text x="8.7094%" y="142.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:143) (1,953 samples, 6.45%)</title><rect x="8.6178%" y="132" width="6.4485%" height="15" fill="rgb(229,88,8)" fg:x="2610" fg:w="1953"/><text x="8.8678%" y="142.50">roll (cu..</text></g><g><title>roll (cupy\_manipulation\rearrange.py:98) (60 samples, 0.20%)</title><rect x="15.0895%" y="132" width="0.1981%" height="15" fill="rgb(213,181,19)" fg:x="4570" fg:w="60"/><text x="15.3395%" y="142.50"></text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:26) (2,674 samples, 8.83%)</title><rect x="6.5278%" y="100" width="8.8292%" height="15" fill="rgb(254,191,54)" fg:x="1977" fg:w="2674"/><text x="6.7778%" y="110.50">angular_spec..</text></g><g><title>fftshift (cupy\fft\_fft.py:1082) (2,562 samples, 8.46%)</title><rect x="6.8976%" y="116" width="8.4594%" height="15" fill="rgb(241,83,37)" fg:x="2089" fg:w="2562"/><text x="7.1476%" y="126.50">fftshift (cu..</text></g><g><title>arange (cupy\_creation\ranges.py:43) (96 samples, 0.32%)</title><rect x="15.7432%" y="132" width="0.3170%" height="15" fill="rgb(233,36,39)" fg:x="4768" fg:w="96"/><text x="15.9932%" y="142.50"></text></g><g><title>arange (cupy\_creation\ranges.py:58) (154 samples, 0.51%)</title><rect x="16.1329%" y="132" width="0.5085%" height="15" fill="rgb(226,3,54)" fg:x="4886" fg:w="154"/><text x="16.3829%" y="142.50"></text></g><g><title>empty (cupy\_creation\basic.py:22) (147 samples, 0.49%)</title><rect x="16.1560%" y="148" width="0.4854%" height="15" fill="rgb(245,192,40)" fg:x="4893" fg:w="147"/><text x="16.4060%" y="158.50"></text></g><g><title>arange (cupy\_creation\ranges.py:60) (365 samples, 1.21%)</title><rect x="16.6777%" y="132" width="1.2052%" height="15" fill="rgb(238,167,29)" fg:x="5051" fg:w="365"/><text x="16.9277%" y="142.50"></text></g><g><title>_atleast_nd_helper (cupy\_manipulation\dims.py:23) (69 samples, 0.23%)</title><rect x="17.9753%" y="180" width="0.2278%" height="15" fill="rgb(232,182,51)" fg:x="5444" fg:w="69"/><text x="18.2253%" y="190.50"></text></g><g><title>asarray (cupy\_creation\from_data.py:75) (65 samples, 0.21%)</title><rect x="17.9885%" y="196" width="0.2146%" height="15" fill="rgb(231,60,39)" fg:x="5448" fg:w="65"/><text x="18.2385%" y="206.50"></text></g><g><title>hstack (cupy\_manipulation\join.py:95) (108 samples, 0.36%)</title><rect x="17.8928%" y="132" width="0.3566%" height="15" fill="rgb(208,69,12)" fg:x="5419" fg:w="108"/><text x="18.1428%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (cupy\_manipulation\join.py:95) (97 samples, 0.32%)</title><rect x="17.9291%" y="148" width="0.3203%" height="15" fill="rgb(235,93,37)" fg:x="5430" fg:w="97"/><text x="18.1791%" y="158.50"></text></g><g><title>atleast_1d (cupy\_manipulation\dims.py:49) (87 samples, 0.29%)</title><rect x="17.9621%" y="164" width="0.2873%" height="15" fill="rgb(213,116,39)" fg:x="5440" fg:w="87"/><text x="18.2121%" y="174.50"></text></g><g><title>fftfreq (cupy\fft\_fft.py:1044) (1,704 samples, 5.63%)</title><rect x="15.5088%" y="116" width="5.6264%" height="15" fill="rgb(222,207,29)" fg:x="4697" fg:w="1704"/><text x="15.7588%" y="126.50">fftfreq..</text></g><g><title>hstack (cupy\_manipulation\join.py:99) (873 samples, 2.88%)</title><rect x="18.2527%" y="132" width="2.8825%" height="15" fill="rgb(206,96,30)" fg:x="5528" fg:w="873"/><text x="18.5027%" y="142.50">hs..</text></g><g><title>concatenate (cupy\_manipulation\join.py:60) (869 samples, 2.87%)</title><rect x="18.2659%" y="148" width="2.8693%" height="15" fill="rgb(218,138,4)" fg:x="5532" fg:w="869"/><text x="18.5159%" y="158.50">co..</text></g><g><title>arange (cupy\_creation\ranges.py:43) (47 samples, 0.16%)</title><rect x="23.3540%" y="132" width="0.1552%" height="15" fill="rgb(250,191,14)" fg:x="7073" fg:w="47"/><text x="23.6040%" y="142.50"></text></g><g><title>arange (cupy\_creation\ranges.py:58) (109 samples, 0.36%)</title><rect x="23.5389%" y="132" width="0.3599%" height="15" fill="rgb(239,60,40)" fg:x="7129" fg:w="109"/><text x="23.7889%" y="142.50"></text></g><g><title>empty (cupy\_creation\basic.py:22) (101 samples, 0.33%)</title><rect x="23.5653%" y="148" width="0.3335%" height="15" fill="rgb(206,27,48)" fg:x="7137" fg:w="101"/><text x="23.8153%" y="158.50"></text></g><g><title>arange (cupy\_creation\ranges.py:60) (319 samples, 1.05%)</title><rect x="23.9252%" y="132" width="1.0533%" height="15" fill="rgb(225,35,8)" fg:x="7246" fg:w="319"/><text x="24.1752%" y="142.50"></text></g><g><title>fftfreq (cupy\fft\_fft.py:1045) (1,168 samples, 3.86%)</title><rect x="21.1352%" y="116" width="3.8566%" height="15" fill="rgb(250,213,24)" fg:x="6401" fg:w="1168"/><text x="21.3852%" y="126.50">fftf..</text></g><g><title>fftshift (cupy\fft\_fft.py:1077) (40 samples, 0.13%)</title><rect x="25.0017%" y="116" width="0.1321%" height="15" fill="rgb(247,123,22)" fg:x="7572" fg:w="40"/><text x="25.2517%" y="126.50"></text></g><g><title>asarray (cupy\_creation\from_data.py:75) (39 samples, 0.13%)</title><rect x="25.0050%" y="132" width="0.1288%" height="15" fill="rgb(231,138,38)" fg:x="7573" fg:w="39"/><text x="25.2550%" y="142.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:124) (54 samples, 0.18%)</title><rect x="25.3021%" y="132" width="0.1783%" height="15" fill="rgb(231,145,46)" fg:x="7663" fg:w="54"/><text x="25.5521%" y="142.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:85) (65 samples, 0.21%)</title><rect x="25.7380%" y="148" width="0.2146%" height="15" fill="rgb(251,118,11)" fg:x="7795" fg:w="65"/><text x="25.9880%" y="158.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:140) (154 samples, 0.51%)</title><rect x="25.7082%" y="132" width="0.5085%" height="15" fill="rgb(217,147,25)" fg:x="7786" fg:w="154"/><text x="25.9582%" y="142.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:88) (78 samples, 0.26%)</title><rect x="25.9592%" y="148" width="0.2575%" height="15" fill="rgb(247,81,37)" fg:x="7862" fg:w="78"/><text x="26.2092%" y="158.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:143) (621 samples, 2.05%)</title><rect x="26.3092%" y="132" width="2.0505%" height="15" fill="rgb(209,12,38)" fg:x="7968" fg:w="621"/><text x="26.5592%" y="142.50">r..</text></g><g><title>roll (cupy\_manipulation\rearrange.py:98) (37 samples, 0.12%)</title><rect x="28.3629%" y="132" width="0.1222%" height="15" fill="rgb(227,1,9)" fg:x="8590" fg:w="37"/><text x="28.6129%" y="142.50"></text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:28) (3,979 samples, 13.14%)</title><rect x="15.3569%" y="100" width="13.1381%" height="15" fill="rgb(248,47,43)" fg:x="4651" fg:w="3979"/><text x="15.6069%" y="110.50">angular_spectrum_met..</text></g><g><title>fftshift (cupy\fft\_fft.py:1082) (995 samples, 3.29%)</title><rect x="25.2097%" y="116" width="3.2853%" height="15" fill="rgb(221,10,30)" fg:x="7635" fg:w="995"/><text x="25.4597%" y="126.50">fft..</text></g><g><title>arange (cupy\_creation\ranges.py:43) (66 samples, 0.22%)</title><rect x="28.8054%" y="132" width="0.2179%" height="15" fill="rgb(210,229,1)" fg:x="8724" fg:w="66"/><text x="29.0554%" y="142.50"></text></g><g><title>empty (cupy\_creation\basic.py:22) (89 samples, 0.29%)</title><rect x="29.0893%" y="148" width="0.2939%" height="15" fill="rgb(222,148,37)" fg:x="8810" fg:w="89"/><text x="29.3393%" y="158.50"></text></g><g><title>arange (cupy\_creation\ranges.py:58) (94 samples, 0.31%)</title><rect x="29.0794%" y="132" width="0.3104%" height="15" fill="rgb(234,67,33)" fg:x="8807" fg:w="94"/><text x="29.3294%" y="142.50"></text></g><g><title>arange (cupy\_creation\ranges.py:60) (488 samples, 1.61%)</title><rect x="29.4030%" y="132" width="1.6113%" height="15" fill="rgb(247,98,35)" fg:x="8905" fg:w="488"/><text x="29.6530%" y="142.50"></text></g><g><title>_atleast_nd_helper (cupy\_manipulation\dims.py:23) (65 samples, 0.21%)</title><rect x="31.1266%" y="180" width="0.2146%" height="15" fill="rgb(247,138,52)" fg:x="9427" fg:w="65"/><text x="31.3766%" y="190.50"></text></g><g><title>asarray (cupy\_creation\from_data.py:75) (56 samples, 0.18%)</title><rect x="31.1563%" y="196" width="0.1849%" height="15" fill="rgb(213,79,30)" fg:x="9436" fg:w="56"/><text x="31.4063%" y="206.50"></text></g><g><title>hstack (cupy\_manipulation\join.py:95) (116 samples, 0.38%)</title><rect x="31.0209%" y="132" width="0.3830%" height="15" fill="rgb(246,177,23)" fg:x="9395" fg:w="116"/><text x="31.2709%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (cupy\_manipulation\join.py:95) (104 samples, 0.34%)</title><rect x="31.0606%" y="148" width="0.3434%" height="15" fill="rgb(230,62,27)" fg:x="9407" fg:w="104"/><text x="31.3106%" y="158.50"></text></g><g><title>atleast_1d (cupy\_manipulation\dims.py:49) (89 samples, 0.29%)</title><rect x="31.1101%" y="164" width="0.2939%" height="15" fill="rgb(216,154,8)" fg:x="9422" fg:w="89"/><text x="31.3601%" y="174.50"></text></g><g><title>fftfreq (cupy\fft\_fft.py:1044) (1,888 samples, 6.23%)</title><rect x="28.6106%" y="116" width="6.2339%" height="15" fill="rgb(244,35,45)" fg:x="8665" fg:w="1888"/><text x="28.8606%" y="126.50">fftfreq ..</text></g><g><title>hstack (cupy\_manipulation\join.py:99) (1,036 samples, 3.42%)</title><rect x="31.4238%" y="132" width="3.4207%" height="15" fill="rgb(251,115,12)" fg:x="9517" fg:w="1036"/><text x="31.6738%" y="142.50">hst..</text></g><g><title>concatenate (cupy\_manipulation\join.py:60) (1,030 samples, 3.40%)</title><rect x="31.4436%" y="148" width="3.4009%" height="15" fill="rgb(240,54,50)" fg:x="9523" fg:w="1030"/><text x="31.6936%" y="158.50">con..</text></g><g><title>arange (cupy\_creation\ranges.py:43) (107 samples, 0.35%)</title><rect x="36.9180%" y="132" width="0.3533%" height="15" fill="rgb(233,84,52)" fg:x="11181" fg:w="107"/><text x="37.1680%" y="142.50"></text></g><g><title>empty (cupy\_creation\basic.py:22) (276 samples, 0.91%)</title><rect x="37.3968%" y="148" width="0.9113%" height="15" fill="rgb(207,117,47)" fg:x="11326" fg:w="276"/><text x="37.6468%" y="158.50"></text></g><g><title>arange (cupy\_creation\ranges.py:58) (287 samples, 0.95%)</title><rect x="37.3638%" y="132" width="0.9476%" height="15" fill="rgb(249,43,39)" fg:x="11316" fg:w="287"/><text x="37.6138%" y="142.50"></text></g><g><title>arange (cupy\_creation\ranges.py:60) (531 samples, 1.75%)</title><rect x="38.3180%" y="132" width="1.7533%" height="15" fill="rgb(209,38,44)" fg:x="11605" fg:w="531"/><text x="38.5680%" y="142.50"></text></g><g><title>fftfreq (cupy\fft\_fft.py:1045) (1,589 samples, 5.25%)</title><rect x="34.8445%" y="116" width="5.2466%" height="15" fill="rgb(236,212,23)" fg:x="10553" fg:w="1589"/><text x="35.0945%" y="126.50">fftfre..</text></g><g><title>fftshift (cupy\fft\_fft.py:1077) (47 samples, 0.16%)</title><rect x="40.1076%" y="116" width="0.1552%" height="15" fill="rgb(242,79,21)" fg:x="12147" fg:w="47"/><text x="40.3576%" y="126.50"></text></g><g><title>asarray (cupy\_creation\from_data.py:75) (41 samples, 0.14%)</title><rect x="40.1275%" y="132" width="0.1354%" height="15" fill="rgb(211,96,35)" fg:x="12153" fg:w="41"/><text x="40.3775%" y="142.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:124) (37 samples, 0.12%)</title><rect x="40.4973%" y="132" width="0.1222%" height="15" fill="rgb(253,215,40)" fg:x="12265" fg:w="37"/><text x="40.7473%" y="142.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:85) (58 samples, 0.19%)</title><rect x="40.8671%" y="148" width="0.1915%" height="15" fill="rgb(211,81,21)" fg:x="12377" fg:w="58"/><text x="41.1171%" y="158.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:140) (130 samples, 0.43%)</title><rect x="40.8572%" y="132" width="0.4292%" height="15" fill="rgb(208,190,38)" fg:x="12374" fg:w="130"/><text x="41.1072%" y="142.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:88) (67 samples, 0.22%)</title><rect x="41.0652%" y="148" width="0.2212%" height="15" fill="rgb(235,213,38)" fg:x="12437" fg:w="67"/><text x="41.3152%" y="158.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:143) (551 samples, 1.82%)</title><rect x="41.3524%" y="132" width="1.8193%" height="15" fill="rgb(237,122,38)" fg:x="12524" fg:w="551"/><text x="41.6024%" y="142.50">r..</text></g><g><title>roll (cupy\_manipulation\rearrange.py:98) (39 samples, 0.13%)</title><rect x="43.1817%" y="132" width="0.1288%" height="15" fill="rgb(244,218,35)" fg:x="13078" fg:w="39"/><text x="43.4317%" y="142.50"></text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:29) (4,502 samples, 14.86%)</title><rect x="28.4950%" y="100" width="14.8650%" height="15" fill="rgb(240,68,47)" fg:x="8630" fg:w="4502"/><text x="28.7450%" y="110.50">angular_spectrum_method..</text></g><g><title>fftshift (cupy\fft\_fft.py:1082) (910 samples, 3.00%)</title><rect x="40.3553%" y="116" width="3.0047%" height="15" fill="rgb(210,16,53)" fg:x="12222" fg:w="910"/><text x="40.6053%" y="126.50">fft..</text></g><g><title>meshgrid (cupy\_creation\ranges.py:316) (112 samples, 0.37%)</title><rect x="43.7991%" y="116" width="0.3698%" height="15" fill="rgb(235,124,12)" fg:x="13265" fg:w="112"/><text x="44.0491%" y="126.50"></text></g><g><title>meshgrid (cupy\_creation\ranges.py:321) (62 samples, 0.20%)</title><rect x="44.1689%" y="116" width="0.2047%" height="15" fill="rgb(224,169,11)" fg:x="13377" fg:w="62"/><text x="44.4189%" y="126.50"></text></g><g><title>broadcast_arrays (cupy\_manipulation\dims.py:113) (52 samples, 0.17%)</title><rect x="44.2019%" y="132" width="0.1717%" height="15" fill="rgb(250,166,2)" fg:x="13387" fg:w="52"/><text x="44.4519%" y="142.50"></text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:30) (1,065 samples, 3.52%)</title><rect x="43.3600%" y="100" width="3.5165%" height="15" fill="rgb(242,216,29)" fg:x="13132" fg:w="1065"/><text x="43.6100%" y="110.50">ang..</text></g><g><title>meshgrid (cupy\_creation\ranges.py:325) (747 samples, 2.47%)</title><rect x="44.4100%" y="116" width="2.4665%" height="15" fill="rgb(230,116,27)" fg:x="13450" fg:w="747"/><text x="44.6600%" y="126.50">me..</text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:32) (3,930 samples, 12.98%)</title><rect x="46.8764%" y="100" width="12.9763%" height="15" fill="rgb(228,99,48)" fg:x="14197" fg:w="3930"/><text x="47.1264%" y="110.50">angular_spectrum_me..</text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:35) (936 samples, 3.09%)</title><rect x="59.8527%" y="100" width="3.0905%" height="15" fill="rgb(253,11,6)" fg:x="18127" fg:w="936"/><text x="60.1027%" y="110.50">ang..</text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:36) (3,342 samples, 11.03%)</title><rect x="62.9433%" y="100" width="11.0348%" height="15" fill="rgb(247,143,39)" fg:x="19063" fg:w="3342"/><text x="63.1933%" y="110.50">angular_spectrum..</text></g><g><title>where (cupy\_sorting\search.py:211) (1,125 samples, 3.71%)</title><rect x="70.2635%" y="116" width="3.7146%" height="15" fill="rgb(236,97,10)" fg:x="21280" fg:w="1125"/><text x="70.5135%" y="126.50">wher..</text></g><g><title>_default_fft_func (cupy\fft\_fft.py:642) (82 samples, 0.27%)</title><rect x="83.7185%" y="132" width="0.2708%" height="15" fill="rgb(233,208,19)" fg:x="25355" fg:w="82"/><text x="83.9685%" y="142.50"></text></g><g><title>_prep_fftn_axes (cupy\fft\_fft.py:283) (37 samples, 0.12%)</title><rect x="83.8671%" y="148" width="0.1222%" height="15" fill="rgb(216,164,2)" fg:x="25400" fg:w="37"/><text x="84.1171%" y="158.50"></text></g><g><title>_default_fft_func (cupy\fft\_fft.py:643) (45 samples, 0.15%)</title><rect x="83.9893%" y="132" width="0.1486%" height="15" fill="rgb(220,129,5)" fg:x="25437" fg:w="45"/><text x="84.2393%" y="142.50"></text></g><g><title>ifft2 (cupy\fft\_fft.py:750) (189 samples, 0.62%)</title><rect x="83.5469%" y="116" width="0.6241%" height="15" fill="rgb(242,17,10)" fg:x="25303" fg:w="189"/><text x="83.7969%" y="126.50"></text></g><g><title>_exec_fftn (cupy\fft\_fft.py:517) (125 samples, 0.41%)</title><rect x="84.5869%" y="148" width="0.4127%" height="15" fill="rgb(242,107,0)" fg:x="25618" fg:w="125"/><text x="84.8369%" y="158.50"></text></g><g><title>empty (cupy\_creation\basic.py:22) (103 samples, 0.34%)</title><rect x="85.0954%" y="164" width="0.3401%" height="15" fill="rgb(251,28,31)" fg:x="25772" fg:w="103"/><text x="85.3454%" y="174.50"></text></g><g><title>_exec_fftn (cupy\fft\_fft.py:552) (131 samples, 0.43%)</title><rect x="85.0063%" y="148" width="0.4325%" height="15" fill="rgb(233,223,10)" fg:x="25745" fg:w="131"/><text x="85.2563%" y="158.50"></text></g><g><title>_exec_fftn (cupy\fft\_fft.py:557) (249 samples, 0.82%)</title><rect x="85.4487%" y="148" width="0.8222%" height="15" fill="rgb(215,21,27)" fg:x="25879" fg:w="249"/><text x="85.6987%" y="158.50"></text></g><g><title>ifft2 (cupy\fft\_fft.py:751) (1,068 samples, 3.53%)</title><rect x="84.1709%" y="116" width="3.5264%" height="15" fill="rgb(232,23,21)" fg:x="25492" fg:w="1068"/><text x="84.4209%" y="126.50">iff..</text></g><g><title>_fftn (cupy\fft\_fft.py:617) (979 samples, 3.23%)</title><rect x="84.4648%" y="132" width="3.2325%" height="15" fill="rgb(244,5,23)" fg:x="25581" fg:w="979"/><text x="84.7148%" y="142.50">_ff..</text></g><g><title>_exec_fftn (cupy\fft\_fft.py:563) (401 samples, 1.32%)</title><rect x="86.3732%" y="148" width="1.3240%" height="15" fill="rgb(226,81,46)" fg:x="26159" fg:w="401"/><text x="86.6232%" y="158.50"></text></g><g><title>ifftshift (cupy\fft\_fft.py:1098) (47 samples, 0.16%)</title><rect x="87.7204%" y="116" width="0.1552%" height="15" fill="rgb(247,70,30)" fg:x="26567" fg:w="47"/><text x="87.9704%" y="126.50"></text></g><g><title>asarray (cupy\_creation\from_data.py:75) (39 samples, 0.13%)</title><rect x="87.7468%" y="132" width="0.1288%" height="15" fill="rgb(212,68,19)" fg:x="26575" fg:w="39"/><text x="87.9968%" y="142.50"></text></g><g><title>&lt;listcomp&gt; (cupy\fft\_fft.py:1103) (31 samples, 0.10%)</title><rect x="88.0902%" y="132" width="0.1024%" height="15" fill="rgb(240,187,13)" fg:x="26679" fg:w="31"/><text x="88.3402%" y="142.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:124) (51 samples, 0.17%)</title><rect x="88.2091%" y="132" width="0.1684%" height="15" fill="rgb(223,113,26)" fg:x="26715" fg:w="51"/><text x="88.4591%" y="142.50"></text></g><g><title>_new_like_order_and_strides (cupy\_creation\basic.py:45) (35 samples, 0.12%)</title><rect x="88.8430%" y="164" width="0.1156%" height="15" fill="rgb(206,192,2)" fg:x="26907" fg:w="35"/><text x="89.0930%" y="174.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:85) (77 samples, 0.25%)</title><rect x="88.7143%" y="148" width="0.2542%" height="15" fill="rgb(241,108,4)" fg:x="26868" fg:w="77"/><text x="88.9643%" y="158.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:140) (188 samples, 0.62%)</title><rect x="88.6779%" y="132" width="0.6207%" height="15" fill="rgb(247,173,49)" fg:x="26857" fg:w="188"/><text x="88.9279%" y="142.50"></text></g><g><title>empty_like (cupy\_creation\basic.py:88) (99 samples, 0.33%)</title><rect x="88.9718%" y="148" width="0.3269%" height="15" fill="rgb(224,114,35)" fg:x="26946" fg:w="99"/><text x="89.2218%" y="158.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:142) (36 samples, 0.12%)</title><rect x="89.3548%" y="132" width="0.1189%" height="15" fill="rgb(245,159,27)" fg:x="27062" fg:w="36"/><text x="89.6048%" y="142.50"></text></g><g><title>roll (cupy\_manipulation\rearrange.py:143) (1,634 samples, 5.40%)</title><rect x="89.4737%" y="132" width="5.3952%" height="15" fill="rgb(245,172,44)" fg:x="27098" fg:w="1634"/><text x="89.7237%" y="142.50">roll (c..</text></g><g><title>roll (cupy\_manipulation\rearrange.py:98) (43 samples, 0.14%)</title><rect x="94.8689%" y="132" width="0.1420%" height="15" fill="rgb(236,23,11)" fg:x="28732" fg:w="43"/><text x="95.1189%" y="142.50"></text></g><g><title>ifftshift (cupy\fft\_fft.py:1103) (2,167 samples, 7.16%)</title><rect x="87.9449%" y="116" width="7.1551%" height="15" fill="rgb(205,117,38)" fg:x="26635" fg:w="2167"/><text x="88.1949%" y="126.50">ifftshift ..</text></g><g><title>angular_spectrum_method (diffractsim\propagation_methods\angular_spectrum_method.py:42) (6,400 samples, 21.13%)</title><rect x="73.9913%" y="100" width="21.1319%" height="15" fill="rgb(237,72,25)" fg:x="22409" fg:w="6400"/><text x="74.2413%" y="110.50">angular_spectrum_method (diffract..</text></g><g><title>get_colors (diffractsim\polychromatic_simulator.py:119) (28,657 samples, 94.62%)</title><rect x="0.5283%" y="84" width="94.6213%" height="15" fill="rgb(244,70,9)" fg:x="160" fg:w="28657"/><text x="0.7783%" y="94.50">get_colors (diffractsim\polychromatic_simulator.py:119)</text></g><g><title>get_colors (diffractsim\polychromatic_simulator.py:123) (170 samples, 0.56%)</title><rect x="95.2519%" y="84" width="0.5613%" height="15" fill="rgb(217,125,39)" fg:x="28848" fg:w="170"/><text x="95.5019%" y="94.50"></text></g><g><title>spec_partition_to_XYZ (diffractsim\colour_functions.py:190) (145 samples, 0.48%)</title><rect x="95.3345%" y="100" width="0.4788%" height="15" fill="rgb(235,36,10)" fg:x="28873" fg:w="145"/><text x="95.5845%" y="110.50"></text></g><g><title>tensordot (cupy\linalg\_product.py:333) (93 samples, 0.31%)</title><rect x="95.5062%" y="116" width="0.3071%" height="15" fill="rgb(251,123,47)" fg:x="28925" fg:w="93"/><text x="95.7562%" y="126.50"></text></g><g><title>XYZ_to_sRGB_linear (diffractsim\colour_functions.py:91) (86 samples, 0.28%)</title><rect x="96.0345%" y="100" width="0.2840%" height="15" fill="rgb(221,13,13)" fg:x="29085" fg:w="86"/><text x="96.2845%" y="110.50"></text></g><g><title>get_colors (diffractsim\polychromatic_simulator.py:124) (217 samples, 0.72%)</title><rect x="95.8132%" y="84" width="0.7165%" height="15" fill="rgb(238,131,9)" fg:x="29018" fg:w="217"/><text x="96.0632%" y="94.50"></text></g><g><title>XYZ_to_sRGB_linear (diffractsim\colour_functions.py:94) (64 samples, 0.21%)</title><rect x="96.3184%" y="100" width="0.2113%" height="15" fill="rgb(211,50,8)" fg:x="29171" fg:w="64"/><text x="96.5684%" y="110.50"></text></g><g><title>get_colors (diffractsim\polychromatic_simulator.py:129) (999 samples, 3.30%)</title><rect x="96.5297%" y="84" width="3.2986%" height="15" fill="rgb(245,182,24)" fg:x="29235" fg:w="999"/><text x="96.7797%" y="94.50">get..</text></g><g><title>&lt;module&gt; (hexagon_polychromatic_windows.py:17) (30,192 samples, 99.69%)</title><rect x="0.2113%" y="68" width="99.6896%" height="15" fill="rgb(242,14,37)" fg:x="64" fg:w="30192"/><text x="0.4613%" y="78.50">&lt;module&gt; (hexagon_polychromatic_windows.py:17)</text></g><g><title>all (30,286 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="30286"/><text x="0.2500%" y="62.50"></text></g></svg></svg>